// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: material.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MaterialService_FindMaterialByID_FullMethodName = "/pb.MaterialService/FindMaterialByID"
	MaterialService_FindAllMaterial_FullMethodName  = "/pb.MaterialService/FindAllMaterial"
)

// MaterialServiceClient is the client API for MaterialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Material Service
type MaterialServiceClient interface {
	// Service to handle material management
	FindMaterialByID(ctx context.Context, in *MaterialID, opts ...grpc.CallOption) (*Material, error)
	FindAllMaterial(ctx context.Context, in *MaterialNoParams, opts ...grpc.CallOption) (*MaterialList, error)
}

type materialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMaterialServiceClient(cc grpc.ClientConnInterface) MaterialServiceClient {
	return &materialServiceClient{cc}
}

func (c *materialServiceClient) FindMaterialByID(ctx context.Context, in *MaterialID, opts ...grpc.CallOption) (*Material, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Material)
	err := c.cc.Invoke(ctx, MaterialService_FindMaterialByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) FindAllMaterial(ctx context.Context, in *MaterialNoParams, opts ...grpc.CallOption) (*MaterialList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MaterialList)
	err := c.cc.Invoke(ctx, MaterialService_FindAllMaterial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MaterialServiceServer is the server API for MaterialService service.
// All implementations must embed UnimplementedMaterialServiceServer
// for forward compatibility.
//
// Material Service
type MaterialServiceServer interface {
	// Service to handle material management
	FindMaterialByID(context.Context, *MaterialID) (*Material, error)
	FindAllMaterial(context.Context, *MaterialNoParams) (*MaterialList, error)
	mustEmbedUnimplementedMaterialServiceServer()
}

// UnimplementedMaterialServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMaterialServiceServer struct{}

func (UnimplementedMaterialServiceServer) FindMaterialByID(context.Context, *MaterialID) (*Material, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMaterialByID not implemented")
}
func (UnimplementedMaterialServiceServer) FindAllMaterial(context.Context, *MaterialNoParams) (*MaterialList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllMaterial not implemented")
}
func (UnimplementedMaterialServiceServer) mustEmbedUnimplementedMaterialServiceServer() {}
func (UnimplementedMaterialServiceServer) testEmbeddedByValue()                         {}

// UnsafeMaterialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaterialServiceServer will
// result in compilation errors.
type UnsafeMaterialServiceServer interface {
	mustEmbedUnimplementedMaterialServiceServer()
}

func RegisterMaterialServiceServer(s grpc.ServiceRegistrar, srv MaterialServiceServer) {
	// If the following call pancis, it indicates UnimplementedMaterialServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MaterialService_ServiceDesc, srv)
}

func _MaterialService_FindMaterialByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).FindMaterialByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_FindMaterialByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).FindMaterialByID(ctx, req.(*MaterialID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_FindAllMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialNoParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).FindAllMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_FindAllMaterial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).FindAllMaterial(ctx, req.(*MaterialNoParams))
	}
	return interceptor(ctx, in, info, handler)
}

// MaterialService_ServiceDesc is the grpc.ServiceDesc for MaterialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaterialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MaterialService",
	HandlerType: (*MaterialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindMaterialByID",
			Handler:    _MaterialService_FindMaterialByID_Handler,
		},
		{
			MethodName: "FindAllMaterial",
			Handler:    _MaterialService_FindAllMaterial_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "material.proto",
}
